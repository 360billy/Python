用socket和多进程配合多线程实现简单的tcp的聊天服务器

python中的socket套接字用于实现网络通信
tcp套接字的使用流程如下：

创建套接字对象 --- clientSocket = socket(AF_INET,SOCK_STREAM)
连接服务器，指定服务器的ip地址和端口（参数是个元组）------------clientSocket.connect(('192.168.99.173',9999))
发送信息 -------------clientSocket.send(msg.encode('utf8'))
接收信息 ----------------msg = clientSocket.recv(1024)
 
 我们先实现一个tcp的客户端

由于socket在接收数据时默认为堵塞状态，当接收数据是进程就刮起了，这时就无法发送信息，要实现全双工的通信，需要给接收数据和发送数据各自分配一个线程。

from socket import *
from threading import Thread



def sendMsg(clientSocket):
    while True:
        msg = input('>>')
        clientSocket.send(msg.encode('utf8'))

def recvMsg(clientSocket):
    while True:
        msg = clientSocket.recv(1024)
        print('\r>>%s'%msg.decode('utf8'))

def main():

    clientSocket = socket(AF_INET,SOCK_STREAM)

    clientSocket.connect(('192.168.99.173',9999))

    tr = Thread(target=recvMsg,args=(clientSocket,)) #将套接字作为参数传给新线程，各自的线程中分别执行收，发数据
    ts = Thread(target=sendMsg,args=(clientSocket,))

    tr.start()
    ts.start()

if __name__ == '__main__':
    main() 
    
    
 接下来实现服务端

服务端的套接字比较特殊，因为是为客户端服务，所以要确定下来ip地址和端口号以便客户端访问，然后服务器还要能生成新的客服套接字单独为一个客户端服务，利用多进程就可以生成多个同时工作的客服socket了。
服务器的套接字工作流程如下：

创建主套接字 --------serverSocket = socket(AF_INET,SOCK_STREAM)
绑定ip和端口 --------------------- serverSocket.bind(('',9999))
改为被动套接字 ------------------------------serverSocket.listen(5)
检测客户端连接 ，若连接则返回 新的服务套接字和客户端地址ip----- newSocket,destAdr = serverSocket.accept()
每个服务套接字进行与客户端的数据交换（在各自的进程里）
# 要求
#1. 使用tcp协议通信
#2. 使用多进程配合多线程配合多线程的方式实现多个全双工的对话。

#实现
#1. 创建tcp的套接字，绑定，监听，变为被动
#2. 每收到一次请求返回新的套接字，同时创建子进程，用来单独用新套接字对话
#3. 子进程中创建两个线程，用来收发数据
import os
from socket import *
from multiprocessing import Process
from threading import Thread,local
import time

def worker(newSocket,destAdr):
    print('创建子会话进程成功..')
    #local_school = local() #创建ThreadLocal对象，用来储存各线程的局部变量
    ts = Thread(target=sendMsg,args=(newSocket,))
    tr = Thread(target=recvMsg,args=(newSocket,))

    ts.start()
    tr.start()

    ts.join()
    tr.join()

def sendMsg(newSocket):
    print('发送进程准备完毕！')
    print(os.getpid())
    while True:
        msg = str( os.getpid())
        newSocket.send(msg.encode('utf8'))
        time.sleep(5)
def ps_is_end():
    print('子进程结束')

def recvMsg(newSocket):
    print('接受进程准备完毕！')
    while True:
        msg = newSocket.recv(1024)
        if msg.decode('utf8')!= '':  #在ubantu中测试当客户端连接关闭时会自动发送‘’，而在windows下运行却会报错
            print('\r>>%s'%msg.decode('utf8'))
        else:
            print('%d下限了'%os.getpid())
            newSocket.close()
            break


def main():
    serverSocket = socket(AF_INET,SOCK_STREAM)

    serverSocket.bind(('',9999))

    serverSocket.listen(5)

    while True:

        newSocket,destAdr = serverSocket.accept()
        p = Process(target=worker,args=(newSocket,destAdr,))

        p.start()
        newSocket.close()#拷贝到了新的进程中，这里的可以删掉了

    serverSocket.close()


if __name__ == '__main__':
    main()
